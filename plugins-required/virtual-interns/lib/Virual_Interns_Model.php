<?php/** * Abstract class which has helper functions to get data from the database */abstract class Casting_Model{    	public $tableName = false;	public $id = false;	public $dataRows = false;	        public function __construct()    {            }        public function insert(array $data,array $datatype=null)    {        global $wpdb;        if(empty($data)){            return false;        }		global $wp_query;		if(!empty($datatype))			$wpdb->insert($this->getTableName(), $data,$datatype);		else			$wpdb->insert($this->getTableName(), $data);		//var_dump($wpdb->last_query);				//$wpdb->print_error();		$this->id = $wpdb->insert_id;        return $wpdb->insert_id;    }		public function getTableName(){		global $table_prefix;		return $table_prefix.$this->tableName;	}		public function whereSql($str, $orderBy = NULL, $limit = NULL)	{		global $wpdb;        $sql = 'SELECT * FROM `'.$this->getTableName().'`';		$sql .= " where $str ";		if(!empty($orderBy)){            $sql .= ' ORDER BY ' . $orderBy;        }				if(!empty($limit)){			$sql .= ' LIMIT ' . $limit;		}              $all = $wpdb->get_results($sql);        return $all;	}       public function findAll( $orderBy = NULL, $limit = NULL )    {        global $wpdb;        $sql = 'SELECT * FROM `'.$this->getTableName().'`';				if(!empty($orderBy)){            $sql .= ' ORDER BY ' . $orderBy;        }				if(!empty($limit)){			$sql .= ' LIMIT ' . $limit;		}                $all = $wpdb->get_results($sql);        return $all;    }		public function countAll()	{		global $wpdb;        $sql = 'SELECT count(*) total FROM `'.$this->getTableName().'`';		        $result = $wpdb->get_row($sql);        return $result->total;	}       	public function getData(){		return $this->dataRows;	}		public function find(array $conditionValue, $condition = '=', $orderBy = NULL, $limit = NULL)    {        global $wpdb;        $sql = 'SELECT * FROM `'.$this->getTableName().'` WHERE ';		$sql_ = '';        foreach ($conditionValue as $field => $value) {            switch(strtolower($condition)){                case 'in':                    if(!is_array($value)){                        throw new Exception("Values for IN query must be an array.", 1);                    }                    $sql_ .= $wpdb->prepare('`%s` IN (%s)', $field, implode(',', $value));                break;                default:					if(!empty($sql_)) $sql_ .= ' AND ';                    $sql_ .= $wpdb->prepare(' `'.$field.'` '.$condition.' %s', $value);                break;            }        }		$sql .= $sql_;				if(!empty($orderBy)){            $sql .= ' ORDER BY ' . $orderBy;        }				if(!empty($limit)){			$sql .= ' LIMIT ' . $limit;		}						$this->id = false;		//echo $sql;        $result = $wpdb->get_results($sql);		if(count($result)==1){			$this->id = $result[0]->id;			$this->dataRows = $result;		}else{			$this->id = false;		}		$this->dataRows = $result;        return $result;    }		public function findByStr($str, $orderBy = NULL, $limit = NULL)    {        global $wpdb;        $sql = 'SELECT * FROM `'.$this->getTableName().'` WHERE '.$str;						if(!empty($orderBy)){            $sql .= ' ORDER BY ' . $orderBy;        }				if(!empty($limit)){			$sql .= ' LIMIT ' . $limit;		}				$this->id = false;		        $result = $wpdb->get_results($sql);		if(count($result)==1){			$this->id = $result[0]->id;			$this->dataRows = $result;		}else{			$this->id = false;		}		$this->dataRows = $result;        return $result;    }		public function findByPk($id)    {        global $wpdb;        $sql = 'SELECT * FROM `'.$this->getTableName().'` WHERE id='.$id;        $this->id = false;        $result = $wpdb->get_row($sql);		if(!empty($result)){			$this->id = $result->id;			$this->dataRows = $result;		}        return $result;    }		public function findBySlug($id)    {        global $wpdb;        $sql = 'SELECT * FROM `'.$this->getTableName()."` WHERE slug='".$id."'";		        $this->id = false;        $result = $wpdb->get_row($sql);		if(!empty($result)){			$this->id = $result->id;			$this->dataRows = $result;		}        return $result;    }		public function load(array $conditionValue, $condition = '=')    {        global $wpdb;        $sql = 'SELECT * FROM `'.$this->getTableName().'` WHERE ';        foreach ($conditionValue as $field => $value) {            switch(strtolower($condition)){                case 'in':                    if(!is_array($value)){                        throw new Exception("Values for IN query must be an array.", 1);                    }                    $sql .= $wpdb->prepare('`%s` IN (%s)', $field, implode(',', $value));                break;                default:                    $sql .= $wpdb->prepare('`'.$field.'` '.$condition.' %s', $value);                break;            }        }				//var_dump($sql);		$result = $wpdb->get_results($sql);				if(count($result)==1){			$this->id = $result[0]->id;		}else{			$this->id = false;					}		$this->dataRows = $result;    }		public function getRef($table, $fk, $condition = '=')    {        global $wpdb;        $sql = 'SELECT * FROM `'.$table.'` WHERE ';		$conditionValue = array($fk => $this->id);        foreach ($conditionValue as $field => $value) {            switch(strtolower($condition)){                case 'in':                    if(!is_array($value)){                        throw new Exception("Values for IN query must be an array.", 1);                    }                    $sql .= $wpdb->prepare('`%s` IN (%s)', $field, implode(',', $value));                break;                default:                    $sql .= $wpdb->prepare('`'.$field.'` '.$condition.' %s', $value);                break;            }        }        $result = $wpdb->get_results($sql);        return $result;    }	    public function update(array $data, array $conditionValue)    {        global $wpdb;        if(empty($data)){            return false;        }        $updated = $wpdb->update( $this->getTableName(), $data, $conditionValue);        return $updated;    }       public function delete(array $conditionValue)    {        global $wpdb;        $deleted = $wpdb->delete( $this->getTableName(), $conditionValue );        return $deleted;    }}?>